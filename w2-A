#Pizza Runner

##Introduction

Did you know that over 115 million kilograms of pizza is consumed daily worldwide??? (Well according to Wikipedia anyway…)

Danny was scrolling through his Instagram feed when something really caught his eye - “80s Retro Styling and Pizza Is The Future!”

Danny was sold on the idea, but he knew that pizza alone was not going to help him get seed funding to expand his new Pizza Empire - so he had one more genius idea to combine with it - he was going to Uberize it - and so Pizza Runner was launched!

Danny started by recruiting “runners” to deliver fresh pizza from Pizza Runner Headquarters (otherwise known as Danny’s house) and also maxed out his credit card to pay freelance developers to build a mobile app to accept orders from customers.

##Available Data

Because Danny had a few years of experience as a data scientist - he was very aware that data collection was going to be critical for his business’ growth.

He has prepared for us an entity relationship diagram of his database design but requires further assistance to clean his data and apply some basic calculations so he can better direct his runners and optimise Pizza Runner’s operations.

All datasets exist within the pizza_runner database schema - be sure to include this reference within your SQL scripts as you start exploring the data and answering the case study questions.

 # A. Pizza Metrics

How many pizzas were ordered?
```
SELECT
	COUNT(order_id)
FROM
pizza_runner.customer_orders
```

How many unique customer orders were made?
```
SELECT
	COUNT(DISTINCT customer_id)
FROM
pizza_runner.customer_orders
```

How many successful orders were delivered by each runner?
```
SELECT
	COUNT (order_id)
FROM
	pizza_runner.runner_orders

WHERE
	cancellation <> 'Customer Cancellation' OR
    cancellation <> 'Restaurant Cancellation'
```

How many of each type of pizza was delivered?
```
SELECT
	pizza_names.pizza_name,
	COUNT (customer_orders.pizza_id)
    
    
FROM
	pizza_runner.runner_orders
    JOIN
    pizza_runner.customer_orders ON runner_orders.order_id = customer_orders.order_id
    JOIN
    pizza_runner.pizza_names ON pizza_names.pizza_id =customer_orders.pizza_id
WHERE
	cancellation <> 'Customer Cancellation' OR
    cancellation <> 'Restaurant Cancellation'
GROUP BY
	pizza_names.pizza_name
```

How many Vegetarian and Meatlovers were ordered by each customer?
```
SELECT
	customer_orders.customer_id,
	pizza_names.pizza_name,
	COUNT (customer_orders.pizza_id)
    
    
FROM
	pizza_runner.runner_orders
    JOIN
    pizza_runner.customer_orders ON runner_orders.order_id = customer_orders.order_id
    JOIN
    pizza_runner.pizza_names ON pizza_names.pizza_id =customer_orders.pizza_id
WHERE
	cancellation <> 'Customer Cancellation' OR
    cancellation <> 'Restaurant Cancellation'
GROUP BY
	pizza_names.pizza_name,
    customer_orders.customer_id
ORDER BY
	 customer_orders.customer_id
```

What was the maximum number of pizzas delivered in a single order?
```
SELECT
	customer_orders.order_id,
	COUNT (customer_orders.order_id)   AS pizza_count
FROM
	pizza_runner.customer_orders
JOIN
	pizza_runner.runner_orders ON runner_orders.order_id = customer_orders.order_id
Where
	runner_orders.pickup_time <> 'null'
GROUP BY
    customer_orders.order_id
ORDER BY
    customer_orders.order_id
```

For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
```
	SELECT customer_id,
 		SUM(CASE 
  		WHEN exclusions <> ' ' OR extras <> ' ' THEN 1
  		ELSE 0
  		END) AS at_least_1_change,
 		SUM(CASE 
  		WHEN exclusions = ' ' AND extras = ' ' THEN 1 
  		ELSE 0
  		END) AS no_change
		FROM runner_orders
  		INNER JOIN customer_orders
  		ON runner_orders.order_id = customer_orders.order_id
  		WHERE distance <> ' '
  		GROUP BY customer_id
```

How many pizzas were delivered that had both exclusions and extras?


What was the total volume of pizzas ordered for each hour of the day?
```
SELECT 
	EXTRACT(HOUR FROM order_time) AS hour,
    count(order_id) AS pizza_ordered   
FROM
	pizza_runner.customer_orders
GROUP BY
	order_time
```
What was the volume of orders for each day of the week?
SELECT 
	to_date(cast(order_time as TEXT),'YYYY-MM-DD') AS CURRENT_DATE,
    count(order_id) AS pizza_ordered   
FROM
	pizza_runner.customer_orders
GROUP BY
	order_time,
    order_id
ORDER BY
    order_id


```

